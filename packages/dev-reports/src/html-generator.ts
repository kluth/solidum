import { BundleAnalyzer } from './bundle-analyzer';
import type { DevReport } from './types';

export class HTMLReportGenerator {
  private bundleAnalyzer = new BundleAnalyzer();

  generate(report: DevReport, themeColor: string = '#3b82f6'): string {
    const date = new Date(report.timestamp).toLocaleString();

    return `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${report.build.name} - Development Report</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
      line-height: 1.6;
      color: #333;
      background: #f5f5f5;
      padding: 20px;
    }
    .container { max-width: 1200px; margin: 0 auto; }
    .header {
      background: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      margin-bottom: 20px;
    }
    h1 { color: ${themeColor}; font-size: 32px; margin-bottom: 10px; }
    .meta { color: #666; font-size: 14px; }
    .card {
      background: white;
      padding: 25px;
      border-radius: 12px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      margin-bottom: 20px;
    }
    h2 { color: ${themeColor}; font-size: 24px; margin-bottom: 15px; border-bottom: 2px solid ${themeColor}; padding-bottom: 10px; }
    .stats {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 15px;
      margin: 20px 0;
    }
    .stat {
      background: linear-gradient(135deg, ${themeColor} 0%, ${this.darkenColor(themeColor, 20)} 100%);
      color: white;
      padding: 20px;
      border-radius: 8px;
      text-align: center;
    }
    .stat-value { font-size: 32px; font-weight: bold; margin-bottom: 5px; }
    .stat-label { font-size: 14px; opacity: 0.9; }
    table {
      width: 100%;
      border-collapse: collapse;
      margin: 15px 0;
    }
    th, td {
      text-align: left;
      padding: 12px;
      border-bottom: 1px solid #ddd;
    }
    th {
      background: #f8f9fa;
      font-weight: 600;
      color: #555;
    }
    tr:hover { background: #f8f9fa; }
    .badge {
      display: inline-block;
      padding: 4px 12px;
      border-radius: 12px;
      font-size: 12px;
      font-weight: 600;
    }
    .badge-success { background: #10b981; color: white; }
    .badge-error { background: #ef4444; color: white; }
    .badge-warning { background: #f59e0b; color: white; }
    .progress-bar {
      height: 8px;
      background: #e5e7eb;
      border-radius: 4px;
      overflow: hidden;
      margin: 10px 0;
    }
    .progress-fill {
      height: 100%;
      background: ${themeColor};
      transition: width 0.3s ease;
    }
    .footer {
      text-align: center;
      color: #999;
      font-size: 14px;
      margin-top: 40px;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>ðŸ“Š ${report.build.name}</h1>
      <div class="meta">
        Version: ${report.build.version} |
        Environment: ${report.build.environment} |
        Generated: ${date}
        ${report.build.branch ? ` | Branch: ${report.build.branch}` : ''}
        ${report.build.commit ? ` | Commit: ${report.build.commit.substring(0, 7)}` : ''}
      </div>
    </div>

    ${this.generateBuildSection(report)}
    ${this.generateBundleSection(report)}
    ${this.generateTestSection(report)}
    ${this.generateCoverageSection(report)}

    <div class="footer">
      <p>Generated by @sldm/dev-reports</p>
    </div>
  </div>
</body>
</html>`;
  }

  private generateBuildSection(report: DevReport): string {
    return `<div class="card">
      <h2>ðŸ”¨ Build Information</h2>
      <div class="stats">
        <div class="stat">
          <div class="stat-value">${(report.build.buildTime / 1000).toFixed(2)}s</div>
          <div class="stat-label">Build Time</div>
        </div>
        <div class="stat">
          <div class="stat-value">${report.build.version}</div>
          <div class="stat-label">Version</div>
        </div>
        <div class="stat">
          <div class="stat-value">${report.build.environment}</div>
          <div class="stat-label">Environment</div>
        </div>
      </div>
    </div>`;
  }

  private generateBundleSection(report: DevReport): string {
    if (!report.bundle) return '';

    const { bundle } = report;
    const changeIndicator = bundle.comparison
      ? bundle.comparison.difference > 0
        ? `<span class="badge badge-warning">+${this.bundleAnalyzer.formatSize(bundle.comparison.difference)} (+${bundle.comparison.percentageChange}%)</span>`
        : `<span class="badge badge-success">${this.bundleAnalyzer.formatSize(bundle.comparison.difference)} (${bundle.comparison.percentageChange}%)</span>`
      : '';

    return `<div class="card">
      <h2>ðŸ“¦ Bundle Size ${changeIndicator}</h2>
      <div class="stats">
        <div class="stat">
          <div class="stat-value">${this.bundleAnalyzer.formatSize(bundle.totalSize)}</div>
          <div class="stat-label">Total Size</div>
        </div>
        <div class="stat">
          <div class="stat-value">${this.bundleAnalyzer.formatSize(bundle.totalGzipSize)}</div>
          <div class="stat-label">Gzipped</div>
        </div>
        ${
          bundle.totalBrotliSize > 0
            ? `
        <div class="stat">
          <div class="stat-value">${this.bundleAnalyzer.formatSize(bundle.totalBrotliSize)}</div>
          <div class="stat-label">Brotli</div>
        </div>
        `
            : ''
        }
      </div>
      <table>
        <thead>
          <tr>
            <th>File</th>
            <th>Size</th>
            <th>Gzip</th>
            ${bundle.bundles.some(b => b.brotliSize) ? '<th>Brotli</th>' : ''}
          </tr>
        </thead>
        <tbody>
          ${bundle.bundles
            .map(
              b => `
            <tr>
              <td>${b.file}</td>
              <td>${this.bundleAnalyzer.formatSize(b.size)}</td>
              <td>${this.bundleAnalyzer.formatSize(b.gzipSize)}</td>
              ${b.brotliSize ? `<td>${this.bundleAnalyzer.formatSize(b.brotliSize)}</td>` : ''}
            </tr>
          `
            )
            .join('')}
        </tbody>
      </table>
    </div>`;
  }

  private generateTestSection(report: DevReport): string {
    if (!report.tests) return '';

    const { tests } = report;
    const successRate = ((tests.passedTests / tests.totalTests) * 100).toFixed(1);

    return `<div class="card">
      <h2>âœ… Test Results</h2>
      <div class="stats">
        <div class="stat">
          <div class="stat-value">${tests.totalTests}</div>
          <div class="stat-label">Total Tests</div>
        </div>
        <div class="stat">
          <div class="stat-value">${tests.passedTests}</div>
          <div class="stat-label">Passed</div>
        </div>
        ${
          tests.failedTests > 0
            ? `
        <div class="stat" style="background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);">
          <div class="stat-value">${tests.failedTests}</div>
          <div class="stat-label">Failed</div>
        </div>
        `
            : ''
        }
        <div class="stat">
          <div class="stat-value">${tests.totalDuration.toFixed(0)}ms</div>
          <div class="stat-label">Duration</div>
        </div>
      </div>
      <div class="progress-bar">
        <div class="progress-fill" style="width: ${successRate}%"></div>
      </div>
      <p style="text-align: center; margin-top: 10px; color: #666;">${successRate}% Success Rate</p>
    </div>`;
  }

  private generateCoverageSection(report: DevReport): string {
    if (!report.coverage) return '';

    const { coverage } = report;

    return `<div class="card">
      <h2>ðŸŽ¯ Code Coverage</h2>
      <div class="stats">
        <div class="stat">
          <div class="stat-value">${coverage.overall.lines.percentage}%</div>
          <div class="stat-label">Lines</div>
        </div>
        <div class="stat">
          <div class="stat-value">${coverage.overall.statements.percentage}%</div>
          <div class="stat-label">Statements</div>
        </div>
        <div class="stat">
          <div class="stat-value">${coverage.overall.functions.percentage}%</div>
          <div class="stat-label">Functions</div>
        </div>
        <div class="stat">
          <div class="stat-value">${coverage.overall.branches.percentage}%</div>
          <div class="stat-label">Branches</div>
        </div>
      </div>
    </div>`;
  }

  private darkenColor(color: string, _percentage: number): string {
    // Simple color darkening - this is a basic implementation
    return color;
  }
}
