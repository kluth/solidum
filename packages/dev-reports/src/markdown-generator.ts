import { BundleAnalyzer } from './bundle-analyzer';
import type { DevReport } from './types';

export class MarkdownReportGenerator {
  private bundleAnalyzer = new BundleAnalyzer();

  generate(report: DevReport): string {
    const date = new Date(report.timestamp).toLocaleString();
    let markdown = `# Development Report: ${report.build.name}\n\n`;
    markdown += `**Version:** ${report.build.version}  \n`;
    markdown += `**Environment:** ${report.build.environment}  \n`;
    markdown += `**Generated:** ${date}  \n`;

    if (report.build.branch) {
      markdown += `**Branch:** ${report.build.branch}  \n`;
    }
    if (report.build.commit) {
      markdown += `**Commit:** \`${report.build.commit}\`  \n`;
    }

    markdown += '\n---\n\n';

    markdown += this.generateBuildSection(report);
    markdown += this.generateBundleSection(report);
    markdown += this.generateTestSection(report);
    markdown += this.generateCoverageSection(report);

    markdown += '\n---\n\n';
    markdown += '*Generated by @sldm/dev-reports*\n';

    return markdown;
  }

  private generateBuildSection(report: DevReport): string {
    const buildTimeSeconds = (report.build.buildTime / 1000).toFixed(2);

    return `## üî® Build Information\n\n` +
      `- **Build Time:** ${buildTimeSeconds}s\n` +
      `- **Version:** ${report.build.version}\n` +
      `- **Environment:** ${report.build.environment}\n\n`;
  }

  private generateBundleSection(report: DevReport): string {
    if (!report.bundle) return '';

    const { bundle } = report;
    let section = `## üì¶ Bundle Size\n\n`;

    section += `- **Total Size:** ${this.bundleAnalyzer.formatSize(bundle.totalSize)}\n`;
    section += `- **Gzipped:** ${this.bundleAnalyzer.formatSize(bundle.totalGzipSize)}\n`;

    if (bundle.totalBrotliSize > 0) {
      section += `- **Brotli:** ${this.bundleAnalyzer.formatSize(bundle.totalBrotliSize)}\n`;
    }

    if (bundle.comparison) {
      const change = bundle.comparison.difference;
      const changeStr = change > 0
        ? `+${this.bundleAnalyzer.formatSize(change)} (+${bundle.comparison.percentageChange}%) ‚ö†Ô∏è`
        : `${this.bundleAnalyzer.formatSize(change)} (${bundle.comparison.percentageChange}%) ‚úÖ`;
      section += `- **Change:** ${changeStr}\n`;
    }

    section += '\n### Bundle Files\n\n';
    section += '| File | Size | Gzip |';

    if (bundle.bundles.some(b => b.brotliSize)) {
      section += ' Brotli |';
    }

    section += '\n|------|------|------|';

    if (bundle.bundles.some(b => b.brotliSize)) {
      section += '-------|';
    }

    section += '\n';

    for (const b of bundle.bundles) {
      section += `| ${b.file} | ${this.bundleAnalyzer.formatSize(b.size)} | ${this.bundleAnalyzer.formatSize(b.gzipSize)} |`;
      if (b.brotliSize) {
        section += ` ${this.bundleAnalyzer.formatSize(b.brotliSize)} |`;
      }
      section += '\n';
    }

    section += '\n';

    return section;
  }

  private generateTestSection(report: DevReport): string {
    if (!report.tests) return '';

    const { tests } = report;
    const successRate = (tests.passedTests / tests.totalTests * 100).toFixed(1);

    let section = `## ‚úÖ Test Results\n\n`;
    section += `- **Total Tests:** ${tests.totalTests}\n`;
    section += `- **Passed:** ${tests.passedTests} ‚úÖ\n`;

    if (tests.failedTests > 0) {
      section += `- **Failed:** ${tests.failedTests} ‚ùå\n`;
    }

    if (tests.skippedTests > 0) {
      section += `- **Skipped:** ${tests.skippedTests} ‚è≠Ô∏è\n`;
    }

    section += `- **Duration:** ${tests.totalDuration.toFixed(0)}ms\n`;
    section += `- **Success Rate:** ${successRate}%\n\n`;

    return section;
  }

  private generateCoverageSection(report: DevReport): string {
    if (!report.coverage) return '';

    const { coverage } = report;

    let section = `## üéØ Code Coverage\n\n`;
    section += '| Metric | Coverage |\n';
    section += '|--------|----------|\n';
    section += `| Lines | ${coverage.overall.lines.percentage}% (${coverage.overall.lines.covered}/${coverage.overall.lines.total}) |\n`;
    section += `| Statements | ${coverage.overall.statements.percentage}% (${coverage.overall.statements.covered}/${coverage.overall.statements.total}) |\n`;
    section += `| Functions | ${coverage.overall.functions.percentage}% (${coverage.overall.functions.covered}/${coverage.overall.functions.total}) |\n`;
    section += `| Branches | ${coverage.overall.branches.percentage}% (${coverage.overall.branches.covered}/${coverage.overall.branches.total}) |\n\n`;

    return section;
  }
}
